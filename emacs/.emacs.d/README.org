#+title:  Emacs Configuration
#+author: dragove
#+startup: overview
#+property: header-args :mkdirp yes :tangle ~/.emacs.d/init.el :results silent :noweb yes
#+auto_tangle: t

#+begin_quote
This code is heavily stolen from [[https://github.com/progfolio/.emacs.d][progfolio's .emacs.d]]
#+end_quote

* Bootstraping
** Early Init

:PROPERTIES:
:header-args: :results silent :tangle ~/.emacs.d/early-init.el
:END:

#+begin_src emacs-lisp
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t -*-
  (setq package-enable-at-startup nil)
  (setq inhibit-default-init nil)

  ;; disable native comp warnings
  (setq native-comp-async-report-warnings-errors nil)
  ;; Set eln-cache dir
  (when (boundp 'native-comp-eln-load-path)
    (startup-redirect-eln-cache (expand-file-name "~/.cache/emacs/eln-cache/" user-emacs-directory)))

  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; to skip the mtime checks on every *.elc file.
  (setq load-prefer-newer noninteractive)

  ;; Skipping a bunch of regular expression searching in the =file-name-handler-alist= should improve start time.
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src

*** Garbage Collection
#+begin_src emacs-lisp
  (let ((normal-gc-cons-threshold (* 20 1024 1024))
        (init-gc-cons-threshold (* 128 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'emacs-startup-hook
              (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))
#+end_src

*** Disable Default UI
#+begin_src emacs-lisp
  ;; Inhibit resizing frame
  (setq frame-inhibit-implied-resize t)

  ;; disable startup screen and silent bell
  (setq ring-bell-function #'ignore
        inhibit-startup-screen t)

  ;; Prevent instructions on how to close an emacsclient frame.
  (setq server-client-instructions nil)

  ;; disable menu-bar tool-bar scroll-bar stuff
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Prevent flashing of unstyled modeline at startup
  (setq-default mode-line-format nil)
#+end_src

*** Font Config
#+begin_src emacs-lisp
  ;; Set default font
  (set-face-attribute 'default
                      nil
                      :font "FiraCode Nerd Font"
                      :height 150)
  (set-fontset-font t 'han (font-spec :family "LXGW Neo XiHei"))
#+end_src

*** Ignore X Resources
#+begin_src emacs-lisp
  (advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

** lexical binding
The following line turns on lexical binding for performance reasons.
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

** Profiling
This function displays how long Emacs took to start.
It's a rough way of knowing when/if I need to optimize my init file.
#+begin_src emacs-lisp
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (message "Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract (current-time) before-init-time)))
                       gcs-done)))
#+end_src

** Emacs
*** Defaults
#+begin_src emacs-lisp
  ;; Better defaults
  (setq inhibit-splash-screen t)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets) ; Show path if names are same
  (setq adaptive-fill-regexp "[ t]+|[ t]*([0-9]+.|*+)[ t]*")
  (setq adaptive-fill-first-line-regexp "^* *$")
  (setq delete-by-moving-to-trash t)         ; Deleting files go to OS's trash folder
  (setq make-backup-files nil)               ; Forbide to make backup files
  (setq auto-save-default nil)               ; Disable auto save
  (setq set-mark-command-repeat-pop t)       ; Repeating C-SPC after popping mark pops it again

  (setq-default major-mode 'text-mode)

  (setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
  (setq sentence-end-double-space nil)

  ;; Tab and Space
  ;; Permanently indent with spaces, never with TABs
  (setq-default c-basic-offset   4
                tab-width        4
                indent-tabs-mode nil)

  ;; initial-buffer-choice
  (setq initial-buffer-choice t) ;;*scratch*

  ;; use utf-8 coding system
  (set-default-coding-systems 'utf-8)

  ;; yes-or-no to y-or-n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; use relative number
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Useful Functions

#+begin_src emacs-lisp
  ;; Delete the current file

  (defun delete-this-file ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (unless (buffer-file-name)
      (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))


  ;; Rename the current file

  (defun rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (progn
        (when (file-exists-p filename)
          (rename-file filename new-name 1))
        (set-visited-file-name new-name)
        (rename-buffer new-name))))
#+end_src

** Elpaca
#+begin_quote
An elisp package manager

https://github.com/progfolio/elpaca
#+end_quote
*** Installer
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.4)
  (defvar elpaca-directory "~/.local/share/emacs/elpaca/")
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (kill-buffer buffer)
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))
  (elpaca-wait)
#+end_src
** Theme and UI stuff
*** Ligature
#+begin_src emacs-lisp
  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

*** Theme
Catppuccin Theme
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
    (setq catppuccin-flavor 'frappe)
    (load-theme 'catppuccin t))
#+end_src
*** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
*** Ace Window
#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window)))
#+end_src
*** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :bind (([remap describe-function] . helpful-callable)
           ([remap describe-command]  . helpful-command)
           ([remap describe-variable] . helpful-variable)
           ([remap describe-key]      . helpful-key)
           ([remap describe-symbol]   . helpful-symbol)
           ("C-c C-d"                 . helpful-at-point)
           :map helpful-mode-map
           ("r"                       . remove-hook-at-point))
    :hook (helpful-mode . cursor-sensor-mode) ; for remove-advice button
    :init
    (with-no-warnings
      (with-eval-after-load 'counsel
        (setq counsel-describe-function-function #'helpful-callable
              counsel-describe-variable-function #'helpful-variable
              counsel-describe-symbol-function #'helpful-symbol
              counsel-descbinds-function #'helpful-callable))

      (with-eval-after-load 'apropos
        ;; patch apropos buttons to call helpful instead of help
        (dolist (fun-bt '(apropos-function apropos-macro apropos-command))
          (button-type-put
           fun-bt 'action
           (lambda (button)
             (helpful-callable (button-get button 'apropos-symbol)))))
        (dolist (var-bt '(apropos-variable apropos-user-option))
          (button-type-put
           var-bt 'action
           (lambda (button)
             (helpful-variable (button-get button 'apropos-symbol)))))))
    :config
    (with-no-warnings
      ;; Open the buffer in other window
      (defun my-helpful--navigate (button)
        "Navigate to the path this BUTTON represents."
        (find-file-other-window (substring-no-properties (button-get button 'path)))
        ;; We use `get-text-property' to work around an Emacs 25 bug:
        (-when-let (pos (get-text-property button 'position
                                           (marker-buffer button)))
          (helpful--goto-char-widen pos)))
      (advice-add #'helpful--navigate :override #'my-helpful--navigate)))
#+end_src
*** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode))
#+end_src
*** Pulsar
#+begin_src emacs-lisp
  (use-package pulsar
    :config
    (pulsar-global-mode))
#+end_src
*** Command Log
#+begin_src emacs-lisp
  (use-package command-log-mode)
#+end_src
** Editing
*** Auto Save
#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (super-save-mode +1)
    (add-to-list 'super-save-triggers 'ace-window)
    (add-to-list 'super-save-hook-triggers 'find-file-hook)
    (setq super-save-remote-files nil))
#+end_src
*** Editor Config
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src
*** Auto Tangle Mode
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
*** Auto Format
#+begin_src emacs-lisp
  (use-package apheleia
    :init
    (apheleia-global-mode +1))
#+end_src
*** Meow
#+begin_src emacs-lisp
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-define-keys
        'insert '("C-o" . meow-open-below))
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . (meow-open-above))
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  (use-package meow
    :init (meow-global-mode)
    :custom
    (meow-esc-delay 0.01)
    (meow-selection-command-fallback
     '((meow-replace . meow-yank)
       (meow-reverse . back-to-indentation)
       (meow-change . meow-change-char)
       (meow-pop-selection . meow-pop-grab)
       (meow-beacon-change . meow-beacon-change-char)
       (meow-cancel . keyboard-quit)
       (meow-delete . meow-C-d)))
    (meow-char-thing-table
     '((?r . round) (?b . square) (?c . curly) (?s . string) (?e . symbol)
       (?w . window) (?B . buffer) (?p . paragraph) (?< . line) (?> . line)
       (?d . defun) (?i . indent) (?x . extend) (?. . sentence)))
    :config (meow-setup))
#+end_src
*** Auto Pair
#+begin_src emacs-lisp
  (use-package elec-pair
    :elpaca nil
    :ensure nil
    :hook (after-init . electric-pair-mode)
    :init (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))
#+end_src
*** Vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :elpaca nil
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :elpaca nil
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
  ;; Use `consult-completion-in-region' if Vertico is enabled.
  ;; Otherwise use the default `completion--in-region' function.
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
#+end_src

*** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src

*** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match 'separator)  ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :init
    (global-corfu-mode)
    :config
    (add-hook 'meow-insert-exit-hook 'corfu-quit))

  ;; A few more useful configurations...
  (use-package emacs
    :elpaca nil
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src

*** Cape
#+begin_src emacs-lisp
  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; NOTE: The order matters!
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src
*** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)

#+end_src

*** Vundo
#+begin_src emacs-lisp
  (use-package vundo
    :bind ("C-x u" . vundo)
    :config (setq vundo-glyph-alist vundo-unicode-symbols))
#+end_src

*** Avy
#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-:" . avy-goto-char)))
#+end_src
** Org Mode
*** Defaults
#+begin_src emacs-lisp
  (use-package jupyter
    :init (setenv "PYDEVD_DISABLE_FILE_VALIDATION" "1"))
  (use-package org
    :config
    (setq org-adapt-indentation nil)
    (setq org-hide-leading-stars t)
    (setq org-startup-folded t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-image-actual-width nil)
    (setq org-display-remote-inline-images 'download)
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "DOING(g)" "|" "DONE(d)"))))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (jupyter . t)
       (emacs-lisp . t)
       (C . t)
       (scheme . t)
       (latex . t)
       (js . t)
       (plantuml . t))))
#+end_src
*** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :config (with-eval-after-load 'org (global-org-modern-mode)))
#+end_src
*** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/Documents/roam")
    (org-roam-dailies-directory "daily/")
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n g" . org-roam-graph)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n c" . org-roam-capture)
     ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode))
  (use-package org-roam-ui
    :elpaca (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** Git Integration
*** Diff Highlight
#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode))
#+end_src
*** Magit
#+begin_src emacs-lisp
    (use-package magit
      :bind (("C-M-g" . magit-status-here)))
#+end_src
** Programming Languages
*** Scheme
#+begin_src emacs-lisp
  (use-package geiser-chez
    :after (geiser)
    :config
    (setq geiser-chez-binary "chez"
          geiser-default-implementation '(chez))
    (add-hook 'scheme-mode-hook 'geiser-mode))
#+end_src

